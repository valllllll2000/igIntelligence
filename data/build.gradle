apply plugin: 'com.android.library'
def cfg = rootProject.ext.configuration;
def libs = rootProject.ext.libraries;

android {
  compileSdkVersion cfg.compileVersion
  buildToolsVersion cfg.buildToolsVersion

  defaultConfig {
    minSdkVersion cfg.minSdk
    targetSdkVersion cfg.targetSdk
    versionCode cfg.versionCode
    versionName cfg.versionName
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
  }

  lintOptions {
    abortOnError false;
    disable 'InvalidPackage' // Some libraries have issues with this
    disable 'OldTargetApi' // Due to Robolectric that modifies the manifest when running tests
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  testCompile "junit:junit:${libs.junit}"
  // Arch dependencies
  provided "com.google.dagger:dagger-compiler:${libs.dagger}"
  compile "com.google.dagger:dagger:${libs.dagger}"

  // Framework dependencies
  compile "com.squareup.retrofit2:retrofit:${libs.retrofit}"
  compile "com.squareup.retrofit2:converter-gson:${libs.retrofit}"
  compile "com.squareup.okhttp3:okhttp:${libs.okhttp}"
  compile "com.squareup.okhttp3:logging-interceptor:${libs.okhttp}"
  compile "io.realm:realm-android:${libs.realm}"

  // Module dependencies
  compile project(':domain')
}
